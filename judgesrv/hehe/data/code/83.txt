#include<math.h> 
  
const int NUM=22;
const int N=1<<21;
const double pi=acos(-1.0);

struct comp{
	double x,y;
	comp(){x=y=0;}
	comp(double _x,double _y){x=_x;y=_y;}
	comp operator + (comp v) {return comp(x+v.x,y+v.y);}
	comp operator - (comp v) {return comp(x-v.x,y-v.y);}
	comp operator * (comp v) {return comp(x*v.x-y*v.y,x*v.y+y*v.x);}
}wn[NUM],aa[N],bb[N],o;

inline void swap(comp &a,comp &b){
	o=a;a=b;b=o;
}
  
void fly(comp a[], int len) {  
	for (int i=0,j=0;i<len;i++) {
		if (i>j) swap(a[i],a[j]); 
		for (int k=len>>1;(j^=k)<k;k>>=1);
	}	
}  
void FFT(comp a[], int len, int op){  
	fly(a,len);//把01234567交换成04261537，方便进行蝴蝶操作 
	for(int id=1;(1<<id)<=len;id++){
		for(int j=0;j<len;j+=(1<<id)){  
			comp w=comp(1,0);  
			for(int k=j;k<j+(1<<id)/2;k++){
				comp A0=a[k];  
				comp A1w=w*a[k+(1<<id)/2];  
				a[k]=A0+A1w;  
				a[k+(1<<id)/2]=A0-A1w;  
				w=w*wn[id];  
			}  
		}  
	}  
	if(op==-1) {  
		//求w^(-nk)即求w^(P-1-nk)即把a[1..len]倒序 (a[0]不变) 
		for(int i=1;i<len/2;i++) swap(a[i],a[len-i]);  
		comp inv=comp(1.0/len,0);  
		for(int i=0;i<len;i++) a[i]=a[i]*inv;  
	}  
} 

void poly_multiply(unsigned *a, int n, unsigned *b, int m, unsigned *c){
	for(int i=0;i<NUM;i++) wn[i]=comp(cos(2*pi/(1<<i)),sin(2*pi/(1<<i)));     
	for(int i=0;i<=n;i++) aa[i]=comp(a[i],0);
	for(int i=0;i<=m;i++) bb[i]=comp(b[i],0);
	FFT(aa,N,1); FFT(bb,N,1);  
	for(int i=0;i<N;i++) aa[i]=aa[i]*bb[i];  
	FFT(aa,N,-1); 
	for(int i=0;i<N;i++) c[i]=int(aa[i].x+0.5);  
}