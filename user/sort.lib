#include <inc/lib.h>

void sort(unsigned *a, int n);

static int
atoi(const char *s)
{
	int ans = 0;
	while(*s) ans = ans * 10 + (*s++ - '0');
	return ans;
}

static void *
fake_malloc(size_t size)
{
	static void *malloc_end = (void *) 0xd0000000;
	size = ROUNDUP(size, PGSIZE);
	void *ret = malloc_end - size;
	for(void *i = ret; i < malloc_end; i += PGSIZE)
		if(sys_page_alloc(0, i, PTE_P | PTE_U | PTE_W) < 0)
			panic("malloc failed %p\n", i);
	malloc_end = ret;
	return ret;
}

static void
GGGqsort(unsigned *a, int l, int r)
{
	int i = l, j = r;
	unsigned x = a[(l + r) / 2];
	do
	{
		while(a[i] < x) ++i;
		while(x < a[j]) --j;
		if(i <= j)
		{
			unsigned y = a[i]; a[i] = a[j]; a[j] = y;
			++i; --j;
		}
	}
	while(i <= j);
	if(l < j) GGGqsort(a, l, j);
	if(i < r) GGGqsort(a, i, r);
}

struct Data
{
	unsigned a[100000007]; int n;
};

#define MAX_MEM_KB (800 * 1024)

static union
{
	char USER_STACK[MAX_MEM_KB << 10];
	struct Data d;
} u __attribute__((aligned(PGSIZE)));

static void
sort_wrapper(void)
{
	sort(u.d.a, u.d.n);
	sys_quit_judge();
}

void
umain(int argc, char **argv)
{
	if(argc != 5)
	{
		cprintf("SORTLIB: usage: %s [time_ms] [mem_kb] [defrag_mem] [n]\n", argv[0]);
		return;
	}
	int time_ms = atoi(argv[1]);
	int mem_kb = atoi(argv[2]);
	int defrag_mem = atoi(argv[3]);
	cprintf("SORTLIB: time %d ms, mem %d kb, defrag %d\n", time_ms, mem_kb, defrag_mem);
	
	if(mem_kb > MAX_MEM_KB)
	{
		cprintf("SORTLIB: too large memory limit!\n");
		return;
	}
	
	struct JudgeParams prm;
	prm.ns = time_ms * 1000000ll;
	prm.kb = mem_kb;
	prm.defrag_mem = defrag_mem;
	prm.data_begin = &u;
	
	memset(prm.syscall_enabled, 0, sizeof(prm.syscall_enabled));
	prm.syscall_enabled[SYS_quit_judge] = 1;
	prm.syscall_enabled[SYS_cputs] = 1;
	
	struct Data *d = fake_malloc(sizeof(*d));
	d->n = atoi(argv[4]);
	d->a[0] = 998244353u;
	for(int i = 1; i < d->n; i++)
		d->a[i] = d->a[i - 1] * 13131u + 3131313u;
	cprintf("SORTLIB: n = %d, making data at %p......\n", d->n, &u);
	memcpy(&u, d, sizeof(*d));
	cprintf("SORTLIB: data ready, before sys_enter_judge......\n");
	int ret = sys_enter_judge(sort_wrapper, &prm);
	cprintf("SORTLIB: sys_enter_judge returned %d\n", ret);
	
	void *old_stack_ptr = 0;
	void *new_stack_ptr = &u + 1;
	asm volatile("xchg %%esp, %0\n\t"
        : "=r"(old_stack_ptr) /* output */
        : "0"(new_stack_ptr) /* input */
    );
	GGGqsort(d->a, 0, d->n - 1);
	asm volatile("xchg %%esp, %0\n\t"
        : "=r"(new_stack_ptr) /* output */
        : "0"(old_stack_ptr) /* input */
    );
	int fd = open("arbiter.in", O_RDWR | O_CREAT | O_TRUNC);
	for(int i = 0; i < d->n; i++)
		if(u.d.a[i] != d->a[i])
		{
			cprintf("SORTLIB: Wrong Answer at %d\n", i);
			fprintf(fd, "Wrong Answer at %d\n", i);
			return;
		}
	cprintf("SORTLIB: Correct Answer!\n");
	fprintf(fd, "Correct Answer!\n");
	close(fd);
}
